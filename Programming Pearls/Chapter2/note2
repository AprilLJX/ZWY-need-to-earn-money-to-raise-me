#第二章 二分搜索，排序，转化数学问题，迭代思想
##知识点
编程前，中，后认真思考
转化为数学问题
##笔记
###关于字符串循环移动的问题：数组x[] abcdefg->defgabc
* 普通解决方法（我的解决方法）  
  * 将abc复制到一个临时数组中，将剩下的元素前移，再将abc从临时数组中复制进去
  * 定义一个函数将x向左移动一次然后重复n次
* 高阶解决方案（可能运行中有漏洞）
  * Question3_1.py   p14页
  * Question3_2.py  迭代法，循环左移x就是将x的两段ab交换位置
  ，得到向量ba。将b分为bl和br两段，使得br和a的长度一样。交换a，br其实就是
  将a bl br转换为br bl a 显然接下来需要将brbl交换过来，由于新的问题和原来
  的问题具有相同的形式，所以可以使用迭代的方法。
* 巧妙的解决方法(转化为数学问题)  
将问题转化为将数组ab转化为ba。由于ba=（a的逆b的逆)的逆。所以先求出a的逆，再求出
b的逆，然后将他们连在一起求出整体的逆
##课后习题思考
第一题：
仅给定单词和字典时：
变位词的字母排序之后得到的新序列应该是相同的。所以只需要将输入单词和字典
中单词全部排序，选出排序序列相同的即可。
允许对词典预处理:
首先对词典中单词进行一次排序。将单词存储到字典中，使用排序后的序列作为键。
第二题：
至少出现2次和至少出现1次没有本质区别。使用二分
第三题：
第一种
~~~
def move_juggle(word,step):
    l = len(word)
    si = 0 # 一轮的起始位置 start index
    c = 0 # 移动次数 count
    while(1):
        tmp = word[si]
        i = si # 一轮中，数组空位下标 index
        while(1):
            ni = (i+step)%l # 待移动元素下标 next index
            if ni == si:
                word[i] = tmp
                c+=1
                break
            word[i] = word[ni]
            i = ni
            c+=1
        if c < l: # 当移动次数和数组长度相同时终止
            si+=1
            continue
        else:
            break
    return "".join(word)
~~~
第二种
~~~
def move_word(word,strt,step):
    l = len(word)-strt
    if l > 2*step:
        tmp = word[strt:strt+step]
        word[strt:strt+step]=word[strt+step:strt+step*2]
        word[strt + step:strt + step * 2] = tmp
        return move_word(word,strt+step,step)
    else:
        tmp = word[strt:strt+step]
        left = word[strt+step:]
        word[strt:strt+len(left)] = left
        word[strt+len(left):strt+len(left)+step] = tmp
        return word
~~~
4.1
~~~
def move_reverse(word,step):
    def reverse(word):
        start = 0
        end = len(word)-1
        while(start<end):
            tmp = word[start]
            word[start] = word[end]
            word[end] = tmp
            start += 1
            end -= 1
        return word
    ans = reverse(reverse(word[:step])+reverse(word[step:]))
    return "".join(ans)
~~~
4.2
“杂技算法”在交换距离增加之后，所需时间会急剧增加。这是因为该算法的高速缓存性能差，高速缓存大小很小，在交换距离增加的时候，“杂技算法”每次只从高速缓存读取一个元素，导致高速缓存需要读取的次数大大增加。

然而，在Python实现的算法中，没有出现这个情况。杂技算法一直是最快的。这应该与Python底层实现有关系。
“杂技算法”在交换距离增加之后，所需时间会急剧增加。这是因为该算法的高速缓存性能差，高速缓存大小很小，在交换距离增加的时候，“杂技算法”每次只从高速缓存读取一个元素，导致高速缓存需要读取的次数大大增加。

然而，在Python实现的算法中，没有出现这个情况。杂技算法一直是最快的。这应该与Python底层实现有关系。
5
（aTbTcT）T = cba
6
这题思路和变位词一样。对于寻找具有共性的
元素的问题，变化元素表示的方式，使不同
的但具有共性的元素拥有同样的内容。这里可以将
人名转换为对应的号码字符串，或者可以直接表示
为整数。将这个号码作为键把人名存储在字典中。
